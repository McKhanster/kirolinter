{
  "kirolinter_version": "0.1.0",
  "timestamp": "2025-08-09T00:17:21.257214Z",
  "target": "test_github_integration.py",
  "summary": {
    "total_files_analyzed": 1,
    "total_issues_found": 18,
    "analysis_time_seconds": 0.01,
    "issues_by_severity": {
      "critical": 3,
      "high": 4,
      "medium": 0,
      "low": 11
    },
    "issues_by_type": {
      "code_smell": 11,
      "security": 7,
      "performance": 0
    },
    "has_critical_issues": true
  },
  "files": [
    {
      "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
      "issues": [
        {
          "id": "unused_var_API_KEY_12",
          "type": "code_smell",
          "severity": "low",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 12,
          "column": 0,
          "message": "Unused variable 'API_KEY'",
          "rule_id": "unused_variable",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "delete",
            "suggested_code": "",
            "confidence": 0.9666666666666667,
            "explanation": "This variable is assigned but never used, which can be safely removed to clean up the code."
          }
        },
        {
          "id": "unused_var_DATABASE_PASSWORD_13",
          "type": "code_smell",
          "severity": "low",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 13,
          "column": 0,
          "message": "Unused variable 'DATABASE_PASSWORD'",
          "rule_id": "unused_variable",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "delete",
            "suggested_code": "",
            "confidence": 0.9611111111111111,
            "explanation": "This variable is assigned but never used, which can be safely removed to clean up the code."
          }
        },
        {
          "id": "unused_var_SECRET_TOKEN_14",
          "type": "code_smell",
          "severity": "low",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 14,
          "column": 0,
          "message": "Unused variable 'SECRET_TOKEN'",
          "rule_id": "unused_variable",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "delete",
            "suggested_code": "",
            "confidence": 0.9555555555555556,
            "explanation": "This variable is assigned but never used, which can be safely removed to clean up the code."
          }
        },
        {
          "id": "unused_var_unused_variable_1_39",
          "type": "code_smell",
          "severity": "low",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 39,
          "column": 4,
          "message": "Unused variable 'unused_variable_1'",
          "rule_id": "unused_variable",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "delete",
            "suggested_code": "",
            "confidence": 0.9500000000000001,
            "explanation": "This variable is assigned but never used, which can be safely removed to clean up the code.",
            "diff_patch": "--- a//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n+++ b//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n@@ -36,7 +36,6 @@\n def complex_function_with_issues(a, b, c, d, e, f, g, h):\n\n     \"\"\"Function with high cyclomatic complexity and code smells.\"\"\"\n\n     # Unused variables - should be detected\n\n-    unused_variable_1 = \"this is not used\"\n\n     unused_variable_2 = 42\n\n     temp_data = {\"key\": \"value\"}\n\n     \n"
          }
        },
        {
          "id": "unused_var_unused_variable_2_40",
          "type": "code_smell",
          "severity": "low",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 40,
          "column": 4,
          "message": "Unused variable 'unused_variable_2'",
          "rule_id": "unused_variable",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "delete",
            "suggested_code": "",
            "confidence": 0.9444444444444444,
            "explanation": "This variable is assigned but never used, which can be safely removed to clean up the code.",
            "diff_patch": "--- a//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n+++ b//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n@@ -37,7 +37,6 @@\n     \"\"\"Function with high cyclomatic complexity and code smells.\"\"\"\n\n     # Unused variables - should be detected\n\n     unused_variable_1 = \"this is not used\"\n\n-    unused_variable_2 = 42\n\n     temp_data = {\"key\": \"value\"}\n\n     \n\n     # High complexity nested conditions\n"
          }
        },
        {
          "id": "unused_var_temp_data_41",
          "type": "code_smell",
          "severity": "low",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 41,
          "column": 4,
          "message": "Unused variable 'temp_data'",
          "rule_id": "unused_variable",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "delete",
            "suggested_code": "",
            "confidence": 0.9388888888888889,
            "explanation": "This variable is assigned but never used, which can be safely removed to clean up the code.",
            "diff_patch": "--- a//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n+++ b//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n@@ -38,7 +38,6 @@\n     # Unused variables - should be detected\n\n     unused_variable_1 = \"this is not used\"\n\n     unused_variable_2 = 42\n\n-    temp_data = {\"key\": \"value\"}\n\n     \n\n     # High complexity nested conditions\n\n     if a > 0:\n"
          }
        },
        {
          "id": "unused_var_GLOBAL_UNUSED_112",
          "type": "code_smell",
          "severity": "low",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 112,
          "column": 0,
          "message": "Unused variable 'GLOBAL_UNUSED'",
          "rule_id": "unused_variable",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "delete",
            "suggested_code": "",
            "confidence": 0.9333333333333333,
            "explanation": "This variable is assigned but never used, which can be safely removed to clean up the code.",
            "diff_patch": "--- a//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n+++ b//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n@@ -109,7 +109,6 @@\n         return processed_data, query\n\n \n\n # Global variables with issues\n\n-GLOBAL_UNUSED = \"this global is never used\"\n\n another_unused_global = 123\n\n \n\n def main():\n"
          }
        },
        {
          "id": "unused_var_another_unused_global_113",
          "type": "code_smell",
          "severity": "low",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 113,
          "column": 0,
          "message": "Unused variable 'another_unused_global'",
          "rule_id": "unused_variable",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "delete",
            "suggested_code": "",
            "confidence": 0.9277777777777778,
            "explanation": "This variable is assigned but never used, which can be safely removed to clean up the code.",
            "diff_patch": "--- a//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n+++ b//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n@@ -110,7 +110,6 @@\n \n\n # Global variables with issues\n\n GLOBAL_UNUSED = \"this global is never used\"\n\n-another_unused_global = 123\n\n \n\n def main():\n\n     \"\"\"Main function that uses some but not all of the above.\"\"\"\n"
          }
        },
        {
          "id": "unused_import_json_8",
          "type": "code_smell",
          "severity": "low",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 8,
          "column": 0,
          "message": "Unused import 'json'",
          "rule_id": "unused_import",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "delete",
            "suggested_code": "",
            "confidence": 1.0,
            "explanation": "This import is not used anywhere in the file and can be safely removed.",
            "diff_patch": "--- a//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n+++ b//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n@@ -5,7 +5,6 @@\n \n\n import os\n\n import sys  # Unused import - should be detected\n\n-import json  # Unused import - should be detected\n\n import subprocess  # Unused import - should be detected\n\n \n\n # Security issues for testing\n"
          }
        },
        {
          "id": "unused_import_subprocess_9",
          "type": "code_smell",
          "severity": "low",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 9,
          "column": 0,
          "message": "Unused import 'subprocess'",
          "rule_id": "unused_import",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "delete",
            "suggested_code": "",
            "confidence": 1.0,
            "explanation": "This import is not used anywhere in the file and can be safely removed.",
            "diff_patch": "--- a//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n+++ b//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n@@ -6,7 +6,6 @@\n import os\n\n import sys  # Unused import - should be detected\n\n import json  # Unused import - should be detected\n\n-import subprocess  # Unused import - should be detected\n\n \n\n # Security issues for testing\n\n API_KEY = \"sk-1234567890abcdef1234567890abcdef\"  # Hardcoded API key\n"
          }
        },
        {
          "id": "unused_import_sys_7",
          "type": "code_smell",
          "severity": "low",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 7,
          "column": 0,
          "message": "Unused import 'sys'",
          "rule_id": "unused_import",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "delete",
            "suggested_code": "",
            "confidence": 1.0,
            "explanation": "This import is not used anywhere in the file and can be safely removed.",
            "diff_patch": "--- a//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n+++ b//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n@@ -4,7 +4,6 @@\n \"\"\"\n\n \n\n import os\n\n-import sys  # Unused import - should be detected\n\n import json  # Unused import - should be detected\n\n import subprocess  # Unused import - should be detected\n\n \n"
          }
        },
        {
          "id": "hardcoded_secret_API_KEY_12",
          "type": "security",
          "severity": "high",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 12,
          "column": 0,
          "message": "Potential hardcoded secret in variable 'API_KEY'",
          "rule_id": "hardcoded_secret",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "replace",
            "suggested_code": "os.environ.get('API_KEY', 'default_value')",
            "confidence": 0.95,
            "explanation": "Hardcoded secrets pose security risks. Use environment variables to store sensitive data securely. (Team prefers APP_ prefix for environment variables)",
            "diff_patch": "--- a//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n+++ b//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n@@ -9,7 +9,7 @@\n import subprocess  # Unused import - should be detected\n\n \n\n # Security issues for testing\n\n-API_KEY = \"sk-1234567890abcdef1234567890abcdef\"  # Hardcoded API key\n\n+API_KEY = os.environ.get(\"API_KEY\", \"your_api_key_here\")\n\n DATABASE_PASSWORD = \"super_secret_password_123\"  # Hardcoded password\n\n SECRET_TOKEN = \"jwt_secret_token_abcdef123456\"   # Hardcoded token\n\n \n"
          }
        },
        {
          "id": "hardcoded_secret_DATABASE_PASSWORD_13",
          "type": "security",
          "severity": "high",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 13,
          "column": 0,
          "message": "Potential hardcoded secret in variable 'DATABASE_PASSWORD'",
          "rule_id": "hardcoded_secret",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "replace",
            "suggested_code": "os.environ.get('DATABASE_PASSWORD', 'default_value')",
            "confidence": 0.9444444444444444,
            "explanation": "Hardcoded secrets pose security risks. Use environment variables to store sensitive data securely. (Team prefers APP_ prefix for environment variables)",
            "diff_patch": "--- a//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n+++ b//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n@@ -10,7 +10,7 @@\n \n\n # Security issues for testing\n\n API_KEY = \"sk-1234567890abcdef1234567890abcdef\"  # Hardcoded API key\n\n-DATABASE_PASSWORD = \"super_secret_password_123\"  # Hardcoded password\n\n+DATABASE_PASSWORD = os.environ.get(\"PASSWORD\", \"your_password_here\")\n\n SECRET_TOKEN = \"jwt_secret_token_abcdef123456\"   # Hardcoded token\n\n \n\n def unsafe_database_query(user_id):\n"
          }
        },
        {
          "id": "hardcoded_secret_SECRET_TOKEN_14",
          "type": "security",
          "severity": "high",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 14,
          "column": 0,
          "message": "Potential hardcoded secret in variable 'SECRET_TOKEN'",
          "rule_id": "hardcoded_secret",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "replace",
            "suggested_code": "os.environ.get('SECRET_TOKEN', 'default_value')",
            "confidence": 0.9388888888888889,
            "explanation": "Hardcoded secrets pose security risks. Use environment variables to store sensitive data securely. (Team prefers APP_ prefix for environment variables)",
            "diff_patch": "--- a//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n+++ b//home/mcesel/Documents/proj/kirolinter/test_github_integration.py\n@@ -11,7 +11,7 @@\n # Security issues for testing\n\n API_KEY = \"sk-1234567890abcdef1234567890abcdef\"  # Hardcoded API key\n\n DATABASE_PASSWORD = \"super_secret_password_123\"  # Hardcoded password\n\n-SECRET_TOKEN = \"jwt_secret_token_abcdef123456\"   # Hardcoded token\n\n+SECRET_TOKEN = os.environ.get(\"SECRET_KEY\", \"your_secret_key_here\")\n\n \n\n def unsafe_database_query(user_id):\n\n     \"\"\"Function with SQL injection vulnerability.\"\"\"\n"
          }
        },
        {
          "id": "hardcoded_password_13",
          "type": "security",
          "severity": "high",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 13,
          "column": 0,
          "message": "Potential hardcoded secret detected (regex fallback)",
          "rule_id": "hardcoded_password",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "replace",
            "suggested_code": "os.environ.get('PASSWORD', 'your_password_here')",
            "confidence": 0.9222222222222223,
            "explanation": "Passwords should never be hardcoded. Use environment variables or secure configuration. (Team prefers APP_ prefix for environment variables)"
          }
        },
        {
          "id": "unsafe_eval_29",
          "type": "security",
          "severity": "critical",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 29,
          "column": 13,
          "message": "Unsafe use of eval() function",
          "rule_id": "unsafe_eval",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "replace",
            "suggested_code": "json.loads(user_input)  # or ast.literal_eval(user_input) for literals",
            "confidence": 0.9166666666666667,
            "explanation": "eval() can execute arbitrary code and poses security risks."
          }
        },
        {
          "id": "unsafe_exec_32",
          "type": "security",
          "severity": "critical",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 32,
          "column": 4,
          "message": "Unsafe use of exec() function",
          "rule_id": "unsafe_exec",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "replace",
            "suggested_code": "# Consider safer alternatives: subprocess.run() for commands, importlib for modules",
            "confidence": 0.9111111111111111,
            "explanation": "exec() can execute arbitrary code and poses security risks."
          }
        },
        {
          "id": "unsafe_eval_104",
          "type": "security",
          "severity": "critical",
          "file_path": "/home/mcesel/Documents/proj/kirolinter/test_github_integration.py",
          "line_number": 104,
          "column": 25,
          "message": "Unsafe use of eval() function",
          "rule_id": "unsafe_eval",
          "cve_id": null,
          "suggested_fix": {
            "fix_type": "replace",
            "suggested_code": "json.loads(user_input)  # or ast.literal_eval(user_input) for literals",
            "confidence": 0.9055555555555556,
            "explanation": "eval() can execute arbitrary code and poses security risks."
          }
        }
      ],
      "metrics": {
        "lines_of_code": 127,
        "functions": 8,
        "classes": 1,
        "imports": 4
      },
      "parse_errors": [
        "Analysis error: PerformanceScanner._analyze_ast() takes 3 positional arguments but 4 were given"
      ]
    }
  ],
  "metadata": {
    "rules_applied": [
      "hardcoded_password",
      "hardcoded_secret",
      "unsafe_eval",
      "unsafe_exec",
      "unused_import",
      "unused_variable"
    ],
    "file_extensions_analyzed": [
      ".py"
    ],
    "excluded_patterns": []
  }
}